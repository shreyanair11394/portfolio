{"ast":null,"code":"/*!\n * jquery.counterup.js 2.1.0\n *\n * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n * Released under the GPL v2 License\n *\n * Amended by Jeremy Paris, Ciro Mattia Gonano and others\n *\n * Date: Feb 24, 2017\n */\n(function ($) {\n  \"use strict\";\n\n  $.fn.counterUp = function (options) {\n    // Defaults\n    var settings = $.extend({\n      'time': 400,\n      'delay': 10,\n      'offset': 100,\n      'beginAt': 0,\n      'formatter': false,\n      'context': 'window',\n      callback: function () {}\n    }, options),\n        s;\n    return this.each(function () {\n      // Store the object\n      var $this = $(this),\n          counter = {\n        time: $(this).data('counterup-time') || settings.time,\n        delay: $(this).data('counterup-delay') || settings.delay,\n        offset: $(this).data('counterup-offset') || settings.offset,\n        beginAt: $(this).data('counterup-beginat') || settings.beginAt,\n        context: $(this).data('counterup-context') || settings.context\n      };\n\n      var counterUpper = function () {\n        var nums = [];\n        var divisions = counter.time / counter.delay;\n        var num = $(this).attr('data-num') ? $(this).attr('data-num') : $this.text();\n        var isComma = /[0-9]+,[0-9]+/.test(num);\n        num = num.replace(/,/g, '');\n        var decimalPlaces = (num.split('.')[1] || []).length;\n        if (counter.beginAt > num) counter.beginAt = num;\n        var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num); // Convert time to total seconds\n\n        if (isTime) {\n          var times = num.split(':'),\n              m = 1;\n          s = 0;\n\n          while (times.length > 0) {\n            s += m * parseInt(times.pop(), 10);\n            m *= 60;\n          }\n        } // Generate list of incremental numbers to display\n\n\n        for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {\n          var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces); // Add incremental seconds and convert back to time\n\n          if (isTime) {\n            newNum = parseInt(s / divisions * i);\n            var hours = parseInt(newNum / 3600) % 24;\n            var minutes = parseInt(newNum / 60) % 60;\n            var seconds = parseInt(newNum % 60, 10);\n            newNum = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n          } // Preserve commas if input had commas\n\n\n          if (isComma) {\n            while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n              newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, '$1' + ',' + '$2');\n            }\n          }\n\n          if (settings.formatter) {\n            newNum = settings.formatter.call(this, newNum);\n          }\n\n          nums.unshift(newNum);\n        }\n\n        $this.data('counterup-nums', nums);\n        $this.text(counter.beginAt); // Updates the number until we're done\n\n        var f = function () {\n          if (!$this.data('counterup-nums')) {\n            settings.callback.call(this);\n            return;\n          }\n\n          $this.html($this.data('counterup-nums').shift());\n\n          if ($this.data('counterup-nums').length) {\n            setTimeout($this.data('counterup-func'), counter.delay);\n          } else {\n            $this.data('counterup-nums', null);\n            $this.data('counterup-func', null);\n            settings.callback.call(this);\n          }\n        };\n\n        $this.data('counterup-func', f); // Start the count up\n\n        setTimeout($this.data('counterup-func'), counter.delay);\n      }; // Perform counts when the element gets into view\n\n\n      $this.waypoint(function (direction) {\n        counterUpper();\n        this.destroy(); //-- Waypoint 3.0 version of triggerOnce\n      }, {\n        offset: counter.offset + \"%\",\n        context: counter.context\n      });\n    });\n  };\n})(jQuery);","map":{"version":3,"sources":["/Users/kinjalmehta/Desktop/portfolio/portfolio/node_modules/jquery.counterup/jquery.counterup.js"],"names":["$","fn","counterUp","options","settings","extend","callback","s","each","$this","counter","time","data","delay","offset","beginAt","context","counterUpper","nums","divisions","num","attr","text","isComma","test","replace","decimalPlaces","split","length","isTime","times","m","parseInt","pop","i","newNum","parseFloat","toFixed","hours","minutes","seconds","toString","formatter","call","unshift","f","html","shift","setTimeout","waypoint","direction","destroy","jQuery"],"mappings":"AAAA;;;;;;;;;;AAUA,CAAC,UAAUA,CAAV,EAAa;AACV;;AAEAA,EAAAA,CAAC,CAACC,EAAF,CAAKC,SAAL,GAAiB,UAAUC,OAAV,EAAmB;AAEhC;AACA,QAAIC,QAAQ,GAAGJ,CAAC,CAACK,MAAF,CAAS;AAChB,cAAQ,GADQ;AAEhB,eAAS,EAFO;AAGhB,gBAAU,GAHM;AAIhB,iBAAW,CAJK;AAKhB,mBAAa,KALG;AAMhB,iBAAW,QANK;AAOhBC,MAAAA,QAAQ,EAAE,YAAY,CACrB;AARe,KAAT,EASRH,OATQ,CAAf;AAAA,QAUII,CAVJ;AAYA,WAAO,KAAKC,IAAL,CAAU,YAAY;AAEzB;AACA,UAAIC,KAAK,GAAGT,CAAC,CAAC,IAAD,CAAb;AAAA,UACIU,OAAO,GAAG;AACNC,QAAAA,IAAI,EAAEX,CAAC,CAAC,IAAD,CAAD,CAAQY,IAAR,CAAa,gBAAb,KAAkCR,QAAQ,CAACO,IAD3C;AAENE,QAAAA,KAAK,EAAEb,CAAC,CAAC,IAAD,CAAD,CAAQY,IAAR,CAAa,iBAAb,KAAmCR,QAAQ,CAACS,KAF7C;AAGNC,QAAAA,MAAM,EAAEd,CAAC,CAAC,IAAD,CAAD,CAAQY,IAAR,CAAa,kBAAb,KAAoCR,QAAQ,CAACU,MAH/C;AAINC,QAAAA,OAAO,EAAEf,CAAC,CAAC,IAAD,CAAD,CAAQY,IAAR,CAAa,mBAAb,KAAqCR,QAAQ,CAACW,OAJjD;AAKNC,QAAAA,OAAO,EAAEhB,CAAC,CAAC,IAAD,CAAD,CAAQY,IAAR,CAAa,mBAAb,KAAqCR,QAAQ,CAACY;AALjD,OADd;;AASA,UAAIC,YAAY,GAAG,YAAY;AAC3B,YAAIC,IAAI,GAAG,EAAX;AACA,YAAIC,SAAS,GAAGT,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACG,KAAvC;AACA,YAAIO,GAAG,GAAGpB,CAAC,CAAC,IAAD,CAAD,CAAQqB,IAAR,CAAa,UAAb,IAA2BrB,CAAC,CAAC,IAAD,CAAD,CAAQqB,IAAR,CAAa,UAAb,CAA3B,GAAsDZ,KAAK,CAACa,IAAN,EAAhE;AACA,YAAIC,OAAO,GAAG,gBAAgBC,IAAhB,CAAqBJ,GAArB,CAAd;AACAA,QAAAA,GAAG,GAAGA,GAAG,CAACK,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAN;AACA,YAAIC,aAAa,GAAG,CAACN,GAAG,CAACO,KAAJ,CAAU,GAAV,EAAe,CAAf,KAAqB,EAAtB,EAA0BC,MAA9C;AACA,YAAIlB,OAAO,CAACK,OAAR,GAAkBK,GAAtB,EACIV,OAAO,CAACK,OAAR,GAAkBK,GAAlB;AAEJ,YAAIS,MAAM,GAAG,uBAAuBL,IAAvB,CAA4BJ,GAA5B,CAAb,CAV2B,CAY3B;;AACA,YAAIS,MAAJ,EAAY;AACR,cAAIC,KAAK,GAAGV,GAAG,CAACO,KAAJ,CAAU,GAAV,CAAZ;AAAA,cACII,CAAC,GAAG,CADR;AAEAxB,UAAAA,CAAC,GAAG,CAAJ;;AACA,iBAAOuB,KAAK,CAACF,MAAN,GAAe,CAAtB,EAAyB;AACrBrB,YAAAA,CAAC,IAAIwB,CAAC,GAAGC,QAAQ,CAACF,KAAK,CAACG,GAAN,EAAD,EAAc,EAAd,CAAjB;AACAF,YAAAA,CAAC,IAAI,EAAL;AACH;AACJ,SArB0B,CAuB3B;;;AACA,aAAK,IAAIG,CAAC,GAAGf,SAAb,EAAwBe,CAAC,IAAIxB,OAAO,CAACK,OAAR,GAAkBK,GAAlB,GAAwBD,SAArD,EAAgEe,CAAC,EAAjE,EAAqE;AAEjE,cAAIC,MAAM,GAAGC,UAAU,CAAChB,GAAG,GAAGD,SAAN,GAAkBe,CAAnB,CAAV,CAAgCG,OAAhC,CAAwCX,aAAxC,CAAb,CAFiE,CAIjE;;AACA,cAAIG,MAAJ,EAAY;AACRM,YAAAA,MAAM,GAAGH,QAAQ,CAACzB,CAAC,GAAGY,SAAJ,GAAgBe,CAAjB,CAAjB;AACA,gBAAII,KAAK,GAAGN,QAAQ,CAACG,MAAM,GAAG,IAAV,CAAR,GAA0B,EAAtC;AACA,gBAAII,OAAO,GAAGP,QAAQ,CAACG,MAAM,GAAG,EAAV,CAAR,GAAwB,EAAtC;AACA,gBAAIK,OAAO,GAAGR,QAAQ,CAACG,MAAM,GAAG,EAAV,EAAc,EAAd,CAAtB;AACAA,YAAAA,MAAM,GAAG,CAACG,KAAK,GAAG,EAAR,GAAa,MAAMA,KAAnB,GAA2BA,KAA5B,IAAqC,GAArC,IAA4CC,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAA3E,IAAsF,GAAtF,IAA6FC,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAA5H,CAAT;AACH,WAXgE,CAajE;;;AACA,cAAIjB,OAAJ,EAAa;AACT,mBAAO,eAAeC,IAAf,CAAoBW,MAAM,CAACM,QAAP,EAApB,CAAP,EAA+C;AAC3CN,cAAAA,MAAM,GAAGA,MAAM,CAACM,QAAP,GAAkBhB,OAAlB,CAA0B,cAA1B,EAA0C,OAAO,GAAP,GAAa,IAAvD,CAAT;AACH;AACJ;;AACD,cAAIrB,QAAQ,CAACsC,SAAb,EAAwB;AACpBP,YAAAA,MAAM,GAAG/B,QAAQ,CAACsC,SAAT,CAAmBC,IAAnB,CAAwB,IAAxB,EAA8BR,MAA9B,CAAT;AACH;;AACDjB,UAAAA,IAAI,CAAC0B,OAAL,CAAaT,MAAb;AACH;;AAED1B,QAAAA,KAAK,CAACG,IAAN,CAAW,gBAAX,EAA6BM,IAA7B;AACAT,QAAAA,KAAK,CAACa,IAAN,CAAWZ,OAAO,CAACK,OAAnB,EAlD2B,CAoD3B;;AACA,YAAI8B,CAAC,GAAG,YAAY;AAChB,cAAI,CAACpC,KAAK,CAACG,IAAN,CAAW,gBAAX,CAAL,EAAmC;AAC/BR,YAAAA,QAAQ,CAACE,QAAT,CAAkBqC,IAAlB,CAAuB,IAAvB;AACA;AACH;;AACDlC,UAAAA,KAAK,CAACqC,IAAN,CAAWrC,KAAK,CAACG,IAAN,CAAW,gBAAX,EAA6BmC,KAA7B,EAAX;;AACA,cAAItC,KAAK,CAACG,IAAN,CAAW,gBAAX,EAA6BgB,MAAjC,EAAyC;AACrCoB,YAAAA,UAAU,CAACvC,KAAK,CAACG,IAAN,CAAW,gBAAX,CAAD,EAA+BF,OAAO,CAACG,KAAvC,CAAV;AACH,WAFD,MAEO;AACHJ,YAAAA,KAAK,CAACG,IAAN,CAAW,gBAAX,EAA6B,IAA7B;AACAH,YAAAA,KAAK,CAACG,IAAN,CAAW,gBAAX,EAA6B,IAA7B;AACAR,YAAAA,QAAQ,CAACE,QAAT,CAAkBqC,IAAlB,CAAuB,IAAvB;AACH;AACJ,SAbD;;AAcAlC,QAAAA,KAAK,CAACG,IAAN,CAAW,gBAAX,EAA6BiC,CAA7B,EAnE2B,CAqE3B;;AACAG,QAAAA,UAAU,CAACvC,KAAK,CAACG,IAAN,CAAW,gBAAX,CAAD,EAA+BF,OAAO,CAACG,KAAvC,CAAV;AACH,OAvED,CAZyB,CAqFzB;;;AACAJ,MAAAA,KAAK,CAACwC,QAAN,CAAe,UAAUC,SAAV,EAAqB;AAChCjC,QAAAA,YAAY;AACZ,aAAKkC,OAAL,GAFgC,CAEhB;AACnB,OAHD,EAGG;AAACrC,QAAAA,MAAM,EAAEJ,OAAO,CAACI,MAAR,GAAiB,GAA1B;AAA+BE,QAAAA,OAAO,EAAEN,OAAO,CAACM;AAAhD,OAHH;AAIH,KA1FM,CAAP;AA4FH,GA3GD;AA6GH,CAhHD,EAgHGoC,MAhHH","sourcesContent":["/*!\n * jquery.counterup.js 2.1.0\n *\n * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n * Released under the GPL v2 License\n *\n * Amended by Jeremy Paris, Ciro Mattia Gonano and others\n *\n * Date: Feb 24, 2017\n */\n(function ($) {\n    \"use strict\";\n\n    $.fn.counterUp = function (options) {\n\n        // Defaults\n        var settings = $.extend({\n                'time': 400,\n                'delay': 10,\n                'offset': 100,\n                'beginAt': 0,\n                'formatter': false,\n                'context': 'window',\n                callback: function () {\n                }\n            }, options),\n            s;\n\n        return this.each(function () {\n\n            // Store the object\n            var $this = $(this),\n                counter = {\n                    time: $(this).data('counterup-time') || settings.time,\n                    delay: $(this).data('counterup-delay') || settings.delay,\n                    offset: $(this).data('counterup-offset') || settings.offset,\n                    beginAt: $(this).data('counterup-beginat') || settings.beginAt,\n                    context: $(this).data('counterup-context') || settings.context\n                };\n\n            var counterUpper = function () {\n                var nums = [];\n                var divisions = counter.time / counter.delay;\n                var num = $(this).attr('data-num') ? $(this).attr('data-num') : $this.text();\n                var isComma = /[0-9]+,[0-9]+/.test(num);\n                num = num.replace(/,/g, '');\n                var decimalPlaces = (num.split('.')[1] || []).length;\n                if (counter.beginAt > num)\n                    counter.beginAt = num;\n\n                var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);\n\n                // Convert time to total seconds\n                if (isTime) {\n                    var times = num.split(':'),\n                        m = 1;\n                    s = 0;\n                    while (times.length > 0) {\n                        s += m * parseInt(times.pop(), 10);\n                        m *= 60;\n                    }\n                }\n\n                // Generate list of incremental numbers to display\n                for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {\n\n                    var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);\n\n                    // Add incremental seconds and convert back to time\n                    if (isTime) {\n                        newNum = parseInt(s / divisions * i);\n                        var hours = parseInt(newNum / 3600) % 24;\n                        var minutes = parseInt(newNum / 60) % 60;\n                        var seconds = parseInt(newNum % 60, 10);\n                        newNum = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n                    }\n\n                    // Preserve commas if input had commas\n                    if (isComma) {\n                        while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n                            newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, '$1' + ',' + '$2');\n                        }\n                    }\n                    if (settings.formatter) {\n                        newNum = settings.formatter.call(this, newNum);\n                    }\n                    nums.unshift(newNum);\n                }\n\n                $this.data('counterup-nums', nums);\n                $this.text(counter.beginAt);\n\n                // Updates the number until we're done\n                var f = function () {\n                    if (!$this.data('counterup-nums')) {\n                        settings.callback.call(this);\n                        return;\n                    }\n                    $this.html($this.data('counterup-nums').shift());\n                    if ($this.data('counterup-nums').length) {\n                        setTimeout($this.data('counterup-func'), counter.delay);\n                    } else {\n                        $this.data('counterup-nums', null);\n                        $this.data('counterup-func', null);\n                        settings.callback.call(this);\n                    }\n                };\n                $this.data('counterup-func', f);\n\n                // Start the count up\n                setTimeout($this.data('counterup-func'), counter.delay);\n            };\n\n            // Perform counts when the element gets into view\n            $this.waypoint(function (direction) {\n                counterUpper();\n                this.destroy(); //-- Waypoint 3.0 version of triggerOnce\n            }, {offset: counter.offset + \"%\", context: counter.context});\n        });\n\n    };\n\n})(jQuery);\n"]},"metadata":{},"sourceType":"script"}